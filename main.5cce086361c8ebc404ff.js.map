{"version":3,"sources":["webpack:///./js/refs.js","webpack:///./js/fetch-countries.js","webpack:///./index.js"],"names":["refs","input","document","querySelector","countriesList","btnRef","countryName","fetch","then","resp","json","catch","console","log","addEventListener","debounce","e","query","target","value","innerHTML","trim","getCountries","data","length","markup","map","name","join","insertAdjacentHTML","languages","flag","population","capital","oneGetCountry","error","text","delay"],"mappings":"+KAKeA,EALF,CACTC,MAAOC,SAASC,cAAc,UAC9BC,cAAeF,SAASC,cAAc,kBACtCE,OAAQH,SAASC,cAAc,S,2YCHpB,WAA4BG,GAA5B,yGACNC,MAAM,yCAAyCD,GACnDE,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBC,OAAM,kBAAMC,QAAQC,IAAI,aAHd,4C,iFCwDfb,EAAKC,MAAMa,iBAAiB,QAASC,KA7BrC,SAAyBC,GACvB,IAAMC,EAAQD,EAAEE,OAAOC,MACvBnB,EAAKI,cAAcgB,UAAY,GAEV,KAAjBH,EAAMI,QD/BG,SAAf,kCCgCIC,CAAaL,EAAMI,QAAQb,MAAK,SAAAe,GAE9B,GADAX,QAAQC,IAAIU,GACRA,EAAKC,OAAS,GAAKD,EAAKC,QAAU,GAAI,CACxC,IAAMC,EAASF,EAAKG,KAAI,2BAAGC,KAAH,WAAkCC,KAAK,IAC/D5B,EAAKI,cAAcgB,UAAY,GAC/BpB,EAAKI,cAAcyB,mBAAmB,YAAaJ,QAC1B,IAAhBF,EAAKC,OA9BtB,SAAuBD,GACrB,IAAMO,EAAYP,EAAK,GAAGO,UACvBJ,KAAI,2BAAGC,KAAH,WACJC,KAAK,IACFH,EAASF,EACZG,KAAI,YAAyC,IAAtCC,EAAsC,EAAtCA,KAAMI,EAAgC,EAAhCA,KAAMC,EAA0B,EAA1BA,WAClB,uCACoBL,EADpB,wCAE0BI,EAF1B,UAEwCJ,EAFxC,mDAD4C,EAAdM,QAC9B,4CAI+BD,EAJ/B,iCAKoBF,EALpB,sCAQDF,KAAK,IACR5B,EAAKI,cAAcgB,UAAY,GAC/BpB,EAAKI,cAAcyB,mBAAmB,YAAaJ,GAe7CS,CAAcX,GACLA,EAAKC,OAAS,GACvBW,gBAAM,CACJC,KAAM,yBACNC,MAAO,OAGTF,gBAAM,CACJC,KAAM,YACNC,MAAO,MAETrC,EAAKI,cAAcgB,UAAY,SAMwB,Q","file":"main.5cce086361c8ebc404ff.js","sourcesContent":["const refs = {\r\n    input: document.querySelector('.input'),\r\n    countriesList: document.querySelector('.countriesList'),\r\n    btnRef: document.querySelector('.btn')\r\n}\r\nexport default refs","export default async function getCountries(countryName) {\r\n  return fetch(`https://restcountries.eu/rest/v2/name/${countryName}`)\r\n    .then(resp => resp.json())\r\n    .catch(() => console.log('error'));\r\n}\r\n\r\n// ======================== with axios ================================\r\n\r\n// import axios from 'axios';\r\n// export default async function getCountries(countryName) {\r\n//   return axios\r\n//     .get(`https://restcountries.eu/rest/v2/name/${countryName}`)\r\n//     .then(resp => resp.data)\r\n//     .catch(error => console.log(error));\r\n// }\r\n","import './styles.css';\r\nimport refs from './js/refs.js';\r\nimport getCountries from './js/fetch-countries';\r\nimport { error } from '@pnotify/core';\r\nimport '@pnotify/core/dist/PNotify.css';\r\nimport '@pnotify/core/dist/BrightTheme.css';\r\nimport debounce from 'lodash.debounce';\r\n\r\nfunction oneGetCountry(data) {\r\n  const languages = data[0].languages\r\n    .map(({ name }) => `<li>${name}</li>`)\r\n    .join('');\r\n  const markup = data\r\n    .map(({ name, flag, population, capital }) => {\r\n      return `<li>\r\n                    <h1>${name}</h1>\r\n                    <img src=\"${flag}\" alt=\"${name}\" width=\"320\">\r\n                    <p>Capital: ${capital}</p>\r\n                    <p>Population: ${population}</p>\r\n                    <ul>${languages}</ul>\r\n                    </li>`;\r\n    })\r\n    .join('');\r\n  refs.countriesList.innerHTML = '';\r\n  refs.countriesList.insertAdjacentHTML('beforeend', markup);\r\n}\r\n\r\nfunction createCountries(e) {\r\n  const query = e.target.value;\r\n  refs.countriesList.innerHTML = '';\r\n\r\n  if (query.trim() !== '') {\r\n    getCountries(query.trim()).then(data => {\r\n      console.log(data);\r\n      if (data.length > 1 && data.length <= 10) {\r\n        const markup = data.map(({ name }) => `<li>${name}</li>`).join('');\r\n        refs.countriesList.innerHTML = '';\r\n        refs.countriesList.insertAdjacentHTML('beforeend', markup);\r\n      } else if (data.length === 1) {\r\n        oneGetCountry(data);\r\n      } else if (data.length > 10) {\r\n        error({\r\n          text: 'too many matches found',\r\n          delay: 2000,\r\n        });\r\n      } else {\r\n        error({\r\n          text: 'not found',\r\n          delay: 2000,\r\n        });\r\n        refs.countriesList.innerHTML = '';\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nrefs.input.addEventListener('input', debounce(createCountries, 500));\r\n\r\n// ======================== with axios ================================\r\n\r\n// import './styles.css';\r\n// import refs from './js/refs.js';\r\n// import getCountries from './js/fetch-countries';\r\n// import { error } from '@pnotify/core';\r\n// import '@pnotify/core/dist/PNotify.css';\r\n// import '@pnotify/core/dist/BrightTheme.css';\r\n// import debounce from 'lodash.debounce';\r\n\r\n// function oneGetCountry(data) {\r\n//   const languages = data[0].languages\r\n//     .map(({ name }) => `<li>${name}</li>`)\r\n//     .join('');\r\n//   const markup = data\r\n//     .map(({ name, flag, population, capital }) => {\r\n//       return `<li>\r\n//                     <h1>${name}</h1>\r\n//                     <img src=\"${flag}\" alt=\"${name}\" width=\"320\">\r\n//                     <p>Capital: ${capital}</p>\r\n//                     <p>Population: ${population}</p>\r\n//                     <ul>${languages}</ul>\r\n//                     </li>`;\r\n//     })\r\n//     .join('');\r\n//   refs.countriesList.innerHTML = '';\r\n//   refs.countriesList.insertAdjacentHTML('beforeend', markup);\r\n// }\r\n\r\n// function createCountries(e) {\r\n//   const query = e.target.value;\r\n//   refs.countriesList.innerHTML = '';\r\n\r\n//   if (query.trim() !== '') {\r\n//     getCountries(query.trim()).then(data => {\r\n//       console.log(data);\r\n//       if (data.length > 1 && data.length <= 10) {\r\n//         const markup = data.map(({ name }) => `<li>${name}</li>`).join('');\r\n//         refs.countriesList.innerHTML = '';\r\n//         refs.countriesList.insertAdjacentHTML('beforeend', markup);\r\n//       } else if (data.length === 1) {\r\n//         oneGetCountry(data);\r\n//       } else if (data.length > 10) {\r\n//         error({\r\n//           text: 'too many matches found',\r\n//           delay: 2000,\r\n//         });\r\n//       } else {\r\n//         error({\r\n//           text: 'not found',\r\n//           delay: 2000,\r\n//         });\r\n//         refs.countriesList.innerHTML = '';\r\n//       }\r\n//     });\r\n//   }\r\n// }\r\n\r\n// refs.input.addEventListener('input', debounce(createCountries, 500));\r\n"],"sourceRoot":""}